#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "elastic-agent-inputs"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Lint'){
      steps {
        withGithubNotify(context: "Lint") {
          dir("${BASE_DIR}"){
            withMageEnv(){
              sh(label: 'Check', script: 'mage -v check')
            }
          }
        }
      }
    }
    // There is nothing to build at the moment.
    // This step must be enabled when we have code to build.
    //stage('build'){
    //  steps {
    //    withGithubNotify(context: "Build") {
    //      deleteDir()
    //      unstash 'source'
    //      dir("${BASE_DIR}"){
    //        withMageEnv(){
    //          sh(label: 'Build', script: 'mage -v check')
    //        }
    //    }
    //  }
    //}
    stage('Test') {
      steps {
        withGithubNotify(context: "Test") {
          deleteDir()
          unstash 'source'
          dir("${BASE_DIR}"){
            withGoEnv(){
              goTestJUnit(options: '-v ./...', output: 'junit-report.xml')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}
